// generated by jsonenums -type=MsgKind; DO NOT EDIT

package sirpent

import (
	"encoding/json"
	"fmt"
)

var (
	_MsgKindNameToValue = map[string]MsgKind{
		"version":   Version,
		"register":  Register,
		"welcome":   Welcome,
		"new_game":  NewGame,
		"turn":      Turn,
		"move":      Move,
		"died":      Died,
		"won":       Won,
		"game_over": GameOver,
	}

	_MsgKindValueToName = map[MsgKind]string{
		Version:  "version",
		Register: "register",
		Welcome:  "welcome",
		NewGame:  "new_game",
		Turn:     "turn",
		Move:     "move",
		Died:     "died",
		Won:      "won",
		GameOver: "game_over",
	}
)

func init() {
	var v MsgKind
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MsgKindNameToValue = map[string]MsgKind{
			interface{}(Version).(fmt.Stringer).String():  Version,
			interface{}(Register).(fmt.Stringer).String(): Register,
			interface{}(Welcome).(fmt.Stringer).String():  Welcome,
			interface{}(NewGame).(fmt.Stringer).String():  NewGame,
			interface{}(Turn).(fmt.Stringer).String():     Turn,
			interface{}(Move).(fmt.Stringer).String():     Move,
			interface{}(Died).(fmt.Stringer).String():     Died,
			interface{}(Won).(fmt.Stringer).String():      Won,
			interface{}(GameOver).(fmt.Stringer).String(): GameOver,
		}
	}
}

// MarshalJSON is generated so MsgKind satisfies json.Marshaler.
func (r MsgKind) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MsgKindValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid MsgKind: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so MsgKind satisfies json.Unmarshaler.
func (r *MsgKind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MsgKind should be a string, got %s", data)
	}
	v, ok := _MsgKindNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid MsgKind %q", s)
	}
	*r = v
	return nil
}
